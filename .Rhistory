max: undefined,
range: undefined,
floating: false,
position: 'bottom',
title: {
text: undefined,
offsetX: 0,
offsetY: 0,
style: {
color: undefined,
fontSize: '12px',
fontFamily: 'Helvetica, Arial, sans-serif',
fontWeight: 600,
cssClass: 'apexcharts-xaxis-title',
},
},
crosshairs: {
show: true,
width: 1,
position: 'back',
opacity: 0.9,
stroke: {
color: '#b6b6b6',
width: 0,
dashArray: 0,
},
fill: {
type: 'solid',
color: '#B1B9C4',
gradient: {
colorFrom: '#D8E3F0',
colorTo: '#BED1E6',
stops: [0, 100],
opacityFrom: 0.4,
opacityTo: 0.5,
},
},
dropShadow: {
enabled: false,
top: 0,
left: 0,
blur: 1,
opacity: 0.4,
},
},
tooltip: {
enabled: true,
formatter: undefined,
offsetY: 0,
style: {
fontSize: 0,
fontFamily: 0,
},
},
}
tess<- read.csv(file = file.choose())
tess
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
ylim = c(0,1.5),
xlab = "Meal Size (g)",
ylab = expression(paste("Temperature change (", degree, 'C)')),
main = 'Snake meals')
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
xlab = "Meal Size (g)",
ylab = expression(paste("Temperature change (", degree, 'C)')),
main = 'Snake meals')
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
xlab = "latitude",
ylab = expression(paste("Temperature change (", degree, 'C)')),
main = 'temperature')
)
ylab = expression(paste("Temperature change"), )
plot(snake$tempChange ~ snake$mealSize,
pch = 10, col = "forestgreen",
ylim = c(0,1.5),
xlab = "Meal Size (g)",
ylab = expression(paste("Temperature change (", degree, 'C)')),
main = 'Snake meals')
main = 'temperature by latitude')
main = 'temperature by latitude')
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
xlab = "latitude",
ylab = "temperature",
main = 'temperature by latitude')
#rattlesnake----
#rattlesnake example
# read in the data from a url
snake <- read.csv(url("http://www.zoology.ubc.ca/~schluter/WhitlockSchluter/wp-content/data/chapter17/chap17q11RattlesnakeDigestion.csv"))
snake
tessRegression <- lm(temp ~ lat, data=tess)
qqnorm(tessRegression$residuals)
qqline(tessRegression$residuals)
plot(tessRegression$residuals ~ tess$temp,
main = 'tess Regression Residual Plot')
qqnorm(tessRegression$residuals)
qqline(tessRegression$residuals)
plot(tessRegression$residuals ~ tess$temp)
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
xlab = "latitude",
ylab = "temperature",
main = 'temperature by latitude')
qqnorm(tessRegression$residuals)
qqline(tessRegression$residuals)
plot(tessRegression$residuals ~ tess$temp,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
tessRegression <- lm(temp ~ lat, data=tess)
qqnorm(tessRegression$residuals)
qqline(tessRegression$residuals)
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$temp,
main = 'tess Regression Residual Plot')
plot(tessRegression$residuals ~ tess$temp,
main = 'tess Regression Residual Plot')
# Residual plot to check linearity, normality, and homoscedasticity.
plot(snakeRegression$residuals ~ snake$mealSize,
main = 'Snake Regression Residual Plot')
plot(tessRegression$residuals ~ tess$temp)
tessRegression
tess
plot(tessRegression$residuals ~ tess$lat,
main = 'tess Regression Residual Plot')
summary(tessRegression)
anova(tessRegression)
plot(tess$temp ~ tess$lat,
pch = 10, col = "forestgreen",
xlab = "latitude",
ylab = "temperature",
main = 'temperature by latitude')
tessRegression <- lm(temp ~ lat, data=tess)
meta<- read.csv(file = file.choose())
mmeta
meta
metameat<- subset (meta$Diet, meta#diet=="meat")
metameat
metameat<- subset (meta$Diet, meta$diet =="meat")
meat
metameat
metameat<- subset (meta$Temp, meta$diet =="meat")
metameat
metameat
salmon
metameat<- subset (meta$Temp, meta$Diet =="meat")
metameat
metano<- subset (meat$Temp, meta$Diet == "Nomeat")
metano<- subset (meta$Temp, meta$Diet == "Nomeat")
metano
hist(metameat)
hist(metano)
?t.test
t.test(x = metameat, y = metano, alternative = 'two.sided', mu = 0, paired = FALSE, var.equal = TRUE)
t.test(x = metameat, y = metano, alternative = 'greater', mu = 0, paired = FALSE, var.equal = TRUE)
t.test(x = metameat, y = metano, alternative = 'greater', mu = 0, paired = FALSE, var.equal = TRUE)
stripchart(meatameat$Temp ~ metano$Temp, vertical = T)
stripchart(metameat$Temp ~ metano$Temp, vertical = T)
stripchart(metameat$Temp ~ metano$Temp, vertical = T)
boxplot(meta$Temp ~ meta$Diet, xlab='coffee chain', ylab='frequency of screen usage', main='percentage of screen usage at different coffee chains')
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='')
t.test(x = metameat, y = metano, alternative = 'greater', mu = 0, paired = FALSE, var.equal = FALSE)
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col(navy) )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "navy" )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "paleblue" )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "aquamarine1" )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col1= "aquamarine1" )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col1= "aquamarine1" )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "aquamarine1" )
boxplot(a, b, col=c("#FF000099", "#FF6D0099")
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "aquamarine1" )
boxplot(a, b, col=c("#FF000099", "#FF6D0099")
boxplot(a, b, col=c('powderblue', 'mistyrose'))
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col= "aquamarine1" )
'
'
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col=c('powderblue', 'mistyrose' )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col=c('powderblue', 'mistyrose' )
c1 <- rainbow(10)
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col=c('powderblue', 'mistyrose' )
c2 <- rainbow(10,
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='', col=c('red', 'blue' )
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', main='')
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature')
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', col=c(blue, red))
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', col=c("blue", "red"))
boxplot(meta$Temp ~ meta$Diet, xlab='Diet', ylab='Temperature', col=c("lightblue", "pink2"))
tissue<- read.csv(file = file.choose())
tissue
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$species =="Oncorhynchus tshawytscha")
Oncorhynchus kisutch<- subset (tissue$sample, tissue$species == "Oncorhynchus kisutch")
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$species =="Oncorhynchus tshawytscha")
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$species =="Oncorhynchus tshawytscha")
Oncorhynchus kisutch<- subset (tissue$sample, tissue$species == "Oncorhynchus kisutch")
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$species =='Oncorhynchus tshawytscha')
tissue
Oncorhynchus kisutch<- subset (tissue$sample, tissue$speecies == "Oncorhynchus kisutch")
hist(metameat)
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$speecies =='Oncorhynchus tshawytscha')
Oncorhynchus kisutch<- subset (tissue$sample, tissue$speecies == "Oncorhynchus kisutch")
View(sculpin.VB)
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$speecies =='Oncorhynchus tshawytscha')
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$speecies =="Oncorhynchus tshawytscha")
Oncorhynchus kisutch<- subset (tissue$sample, tissue$speecies == "Oncorhynchus kisutch")
Oncorhynchus tshawytscha<- subset (tissue$sample, tissue$speecies =="Oncorhynchus tshawytscha")
Oncorhynchus kisutch<- subset (tissue$sample, tissue$speecies == "Oncorhynchus kisutch")
tissue
tshawytscha<- subset(tissue$sample, tissue$speecies == "Oncorhynchus tshawytscha")
kisutch<- subset(tissue$sample, tissue$speecies== "Oncorhynchus kisutch")
hist(tshawytscha)
hist(kisutc)
hist(kisutch)
boxplot(tissue$sample ~ tissue$speecies, xlab='species', ylab='sample', col=c("lightblue", "pink2"))
boxplot(tissue$sample ~ tissue$speecies, xlab='species', ylab='p,p'-DDT ug/g, col=c("lightblue", "pink2"))
boxplot(tissue$sample ~ tissue$speecies, xlab='species', ylab= 'p,p-DDT ug/g' , col=c("lightblue", "pink2"))
t.test(x = tshawytscha, y = kisutch, alternative = '', mu = 0, paired = FALSE, var.equal = FALSE)
t.test(x = tshawytscha, y = kisutch, alternative = 'two.sided', mu = 0, paired = FALSE, var.equal = FALSE)
boxplot(tissue$sample ~ tissue$speecies, xlab='Species', ylab= 'concentration p,p-DDT ug/g' , col=c("lightblue", "pink2"))
boxplot(tissue$sample ~ tissue$speecies, xlab='Species', ylab= 'Concentration p,p-DDT ug/g' , col=c("lightblue", "pink2"))
boxplot(tissue$sample ~ tissue$speecies, xlab='Species', ylab= 'Tissue concentration p,p-DDT ug/g' , col=c("lightblue", "pink2"))
lamprey<- read.csv(file = file.choose())
lamprey
lamprey.aov = aov(lamprey$time ~ iris$group)
lamprey.aov = aov(lamprey$time ~ lamprey$group)
lamprey.aov = aov(lamprey$group ~ lamprey$time)
summary(lamprey.aov)
tapply(lamprey$group ~ lamprey$time, mean)
tapply(lamprey$time ~ lamprey$group, mean)
lamprey.aov = aov(lamprey$group ~ lamprey$time)
summary(lamprey.aov)
lamprey.aov = aov(lamprey$group ~ lamprey$time)
summary(lamprey.aov)
lamprey.aov = aov(lamprey$time ~ lamprey$group)
lamprey.aov = aov(lamprey$group ~ lamprey$time)
summary(lamprey.aov)
stripchart(lamprey$group ~ lamprey$time,vertical = T,  method = "jitter", jitter = 0.1, pch = 19, col = "navy", las = 1)
lamprey.aov = aov(lamprey$time ~ lamprey$group)
stripchart(lamprey$time ~ lamprey$group,vertical = T,  method = "jitter", jitter = 0.1, pch = 19, col = "navy", las = 1)
lamprey<- read.csv(file = file.choose())
lamprey
lamprey.aov = aov(lamprey$time ~ lamprey$group)
lamprey$time <- as.numeric(as.character(lamprey$time))
lamprey.aov = aov(lamprey$time ~ lamprey$group)
lamprey.aov = aov(lamprey$time ~ lamprey$group)
lamprey<- read.csv(file = file.choose())
lamprey
lamprey.aov = aov(lamprey$time ~ lamprey$group)
aov.?
aov.?
?aov
aov.?
?anova
aov.?
?aov.
?aov
stripchart(lamprey$time ~ lamprey$group,vertical = T,  method = "jitter", jitter = 0.1, pch = 19, col = "navy", las = 1)
View(lamprey.aov)
lampreyRegression <- lm(time ~ group, data=lamprey)
summary(birdsRegression)
lampreyRegression <- lm(time ~ group, data=lamprey)
lamprey<- read.csv(file = file.choose())
lamprey
lamprey.aov = aov(lamprey$time ~ lamprey$group)
stripchart(lamprey$time ~ lamprey$group,vertical = T,  method = "jitter", jitter = 0.1, pch = 19, col = "navy", las = 1)
lamprey<- read.csv(file = file.choose())
lamprey<- read.csv(file = file.choose())
lamprey
lampreyRegression <- lm((time) ~ number, data=lamprey)
summary(lampreyRegression)
#test-------
lamprey<- read.csv(file = file.choose())
lampreyRegression <- lm((time) ~ number, data=lamprey)
summary(lampreyRegression)
anova(lampreyRegression)
plot(lamprey$time ~ lamprey$number)
stripchart(lamprey$time ~ lamprey$number,vertical = T,  method = "jitter", jitter = 0.1, pch = 19, col = "navy", las = 1)
plot(lamprey$time ~ lamprey$number, xlab= "Lamprey Density", ylab="Passage Duration (minutes)",pch = 21, bg = 'tomato1')
abline(lampreyRegression)
boxplot(lamprey$time ~ lamprey$number, xlab= "Lamprey Density", ylab="Passage Duration (minutes)",pch = 21, bg = 'tomato1')
abline(lampreyRegression)
boxplot(lamprey$time ~ lamprey$number, xlab= "Lamprey Density", ylab="Passage Duration (minutes)",pch = 21,notch = TRUE, bg = 'tomato1')
abline(lampreyRegression)
boxplot(lamprey$time ~ lamprey$number, xlab= "Lamprey Density", ylab="Passage Duration (minutes)",pch = 21, bg = 'tomato1')
abline(lampreyRegression)
plot(lamprey$time ~ lamprey$number, xlab= "Lamprey Density", ylab="Passage Duration (minutes)",pch = 21, bg = 'tomato1')
abline(lampreyRegression)
# Mean +/- standard deviation
ggerrorplot(Tlamprey, x = "time", y = "number",
desc_stat = "mean_sd")
install.packages("ggpubr")
ggerrorplot(Tlamprey, x = "time", y = "number",
desc_stat = "mean_sd")
# Change error plot type and add mean points
ggerrorplot(ToothGrowth, x = "dose", y = "len",
desc_stat = "mean_sd",
error.plot = "errorbar",            # Change error plot type
add = "mean"                        # Add mean points
)
install.packages("ggpubr")
# Mean +/- standard deviation
ggerrorplot(Tlamprey, x = "time", y = "number",
desc_stat = "mean_sd")
# Change error plot type and add mean points
ggerrorplot(ToothGrowth, x = "dose", y = "len",
desc_stat = "mean_sd",
error.plot = "errorbar",            # Change error plot type
add = "mean"                        # Add mean points
)
# Mean +/- standard deviation
ggerrorplot(lamprey, x = "time", y = "number",
desc_stat = "mean_sd")
lampreyRegression <- lm((time) ~ number, data=lamprey)
summary(lampreyRegression)
anova(lampreyRegression)
# Change error plot type and add mean points
ggerrorplot(lamprey, x = "time", y = "number",
desc_stat = "mean_sd",
error.plot = "errorbar",            # Change error plot type
add = "mean"                        # Add mean points
)
#binned anova-------
lamprey.bin<- read.csv(file = file.choose())
fish<- read.csv(file = file.choose())
plot(t,z, type="b", col="green", lwd=5, pch=15, xlab="time", ylab="concentration", ylim=range(w,z))
lines(t, w, type="b", col="red", lwd=2, pch=19)
title("Exponential growth and decay")
tshawytscha<- subset(fish$concentration, fish$species == "Oncorhynchus tshawytscha")
kisutch<- subset(fish$concentration, fish$species== "Oncorhynchus kisutch")
plot(concentration,date, type="b", col="green", lwd=5, pch=15, xlab="time", ylab="concentration", ylim=range(w,z))
plot(tshawytscha$date, tshawytscha$consentration, type = "b", frame = FALSE, pch = 19,
col = "red", xlab = "x", ylab = "y")
plot(tshawytscha$date, tshawytscha$consentration, type="b", col="green", lwd=5, pch=15, xlab="time", ylab="concentration", ylim=range(w,z))
install.packages("splitstackshape")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("devtools")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
install.packages("dplyr")
setwd("~/Desktop/DataClass/R_analysis/MechaCar_statistical_analysis")
library(readr)
Suspension_Coil <- read_csv("Suspension_Coil.csv")
View(Suspension_Coil)
library(readr)
MechaCar_mpg <- read_csv("MechaCar_mpg.csv")
View(MechaCar_mpg)
#Deliverable 1: linear regression to predict MPG-----
library(tidyverse)
#read csv
demo_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#read csv
car_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(demo_table)
#multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table))
###Does this linear model predict mpg of MechaCar prototypes effectively? Why or why not?
#yes -> r-squared value
#Deliverable 2: Create visualizations for the trip analysis-------
#read csv
coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- summarize(coil_table$PSI)
?summarize
summarize_demo <- coil_table %>% summarize(Mean=mean(PSI),Median=Median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep')
summarize_demo <- coil_table %>% summarize(Mean=mean(PSI),Median=Median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
summarize_demo <- coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
#summary stats of suspension coil's psi column
total_summary <- coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(total_summary)
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=Median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
View(lot_summary)
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(total_summary$Mean, mu = 1500)
View(coil_table)
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
?t.test
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
t.test(coil_table$PSI, mu = 1500, subset(coil_table$Manufacturing_Lot == 'Lot1'))
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
t.test(PSI, mu = 1500, data = coil_table, subset ='Lot1')
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
t.test(PSI, mu = 1500, data = coil_table, subset ='Lot1')
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
t.test(coil_table$PSI, mu = 1500, subset ='Lot1')
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table$Manufacturing_Lot == 'Lot1')
t.test(coil_table$PSI, mu = 1500, subset(coil_table, Manufacturing_Lot == 'Lot1' ))
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table, Manufacturing_Lot == 'Lot1' )
View(lot_1)
t.test(lot_1$PSI, mu = 1500)
#lot 2
lot_2 <- subset(coil_table, Manufacturing_Lot == 'Lot2' )
t.test(lot_2$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table, Manufacturing_Lot == 'Lot1' )
t.test(lot_1$PSI, mu = 1500)
#lot 2
lot_2 <- subset(coil_table, Manufacturing_Lot == 'Lot2' )
t.test(lot_2$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
#lot 2
lot_2 <- subset(coil_table, Manufacturing_Lot == 'Lot2' )
t.test(lot_2$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
t.test(lot_2$PSI, mu = 1500)
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table, Manufacturing_Lot == 'Lot1' )
t.test(lot_1$PSI, mu = 1500)
#lot 2
lot_2 <- subset(coil_table, Manufacturing_Lot == 'Lot2' )
t.test(lot_2$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
170.2861224/13.0493725
#multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table)
#summary stats
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table))
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
#summary stats
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table))
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
t.test(lot_2$PSI, mu = 1500)
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table, Manufacturing_Lot == 'Lot1' )
t.test(lot_1$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
#Deliverable 1: linear regression to predict MPG-----
#install packages
library(tidyverse)
#read csv
car_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table)
#summary stats
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle +ground_clearance + AWD,data=car_table))
#Deliverable 2: Create visualizations for the trip analysis-------
#read csv
coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#summary stats of suspension coil's psi column
total_summary <- coil_table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
#lot summary stats table
lot_summary <- coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep')
#Deliverable 3: T-tests on suspension coils-----
#t.test to determine if psi across manufacturing lots is statistically different from pop. mean of 1,500 psi.
# h0 <- mu = 1500, ha <- mu /= 1500
t.test(coil_table$PSI, mu = 1500)
#t.tests to determine if each lot is statistically different from pop. mean 1500.
#lot 1
lot_1 <- subset(coil_table, Manufacturing_Lot == 'Lot1' )
t.test(lot_1$PSI, mu = 1500)
#lot 2
lot_2 <- subset(coil_table, Manufacturing_Lot == 'Lot2' )
t.test(lot_2$PSI, mu = 1500)
#lot 3
lot_3 <- subset(coil_table, Manufacturing_Lot == 'Lot3' )
t.test(lot_3$PSI, mu = 1500)
